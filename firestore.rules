/**
 * @fileoverview Firestore Security Rules for Finance Flow App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only read and write
 * data associated with their own user ID. All data is nested under /users/{userId},
 * ensuring clear ownership and preventing unauthorized access.
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/incomes/{incomeId}: Income records for a specific user.
 * - /users/{userId}/expenses/{expenseId}: Expense records for a specific user.
 * - /users/{userId}/installments/{installmentId}: Installment plan records for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data harvesting.
 * - Read-only collections are not present in this data model.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - The `userId` is duplicated in the subcollections to avoid collection group queries.
 *
 *  Structural Segregation:
 *   - All data is private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection, ensuring only the owner can read and write their profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can access their own profile if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (get, list, update, delete) - Another authenticated user cannot access a profile.
     * @principle Enforces user-ownership for profile access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /incomes subcollection, ensuring only the owner can manage their income records.
     * @path /users/{userId}/incomes/{incomeId}
     * @allow (create) - Authenticated user can create an income record if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can access their own income record if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create an income.
     * @deny (get, list, update, delete) - Another authenticated user cannot access an income record.
     * @principle Enforces user-ownership for income record access.
     */
    match /users/{userId}/incomes/{incomeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /expenses subcollection, ensuring only the owner can manage their expense records.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - Authenticated user can create an expense record if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can access their own expense record if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create an expense.
     * @deny (get, list, update, delete) - Another authenticated user cannot access an expense record.
     * @principle Enforces user-ownership for expense record access.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /installments subcollection, ensuring only the owner can manage their installment records.
     * @path /users/{userId}/installments/{installmentId}
     * @allow (create) - Authenticated user can create an installment record if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can access their own installment record if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create an installment.
     * @deny (get, list, update, delete) - Another authenticated user cannot access an installment record.
     * @principle Enforces user-ownership for installment record access.
     */
    match /users/{userId}/installments/{installmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}