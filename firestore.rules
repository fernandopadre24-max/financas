rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a strict user-ownership model for all data.
     * All data is nested under /users/{userId}, and each user can only access their own data.
     * User documents are self-created. Listing of user documents is denied.
     * All subcollections under a user are owned by that user.
     */

    /**
     * @description Protects the /users/{userId} document, allowing self-creation and owner-only access.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - A user with UID 'user_abc' can create their own user document at /users/user_abc.
     * @allow (get, update, delete) - A user with UID 'user_abc' can get, update, and delete their own user document at /users/user_abc.
     * @deny (create) - A user with UID 'user_abc' cannot create a user document at /users/user_xyz.
     * @deny (get, update, delete) - A user with UID 'user_abc' cannot get, update, and delete the user document at /users/user_xyz.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/incomes/{incomeId} collection, allowing owner-only access.
     * @path /databases/{database}/documents/users/{userId}/incomes/{incomeId}
     * @allow (create) - A user with UID 'user_abc' can create an income document under their user document.
     * @allow (get, list, update, delete) - A user with UID 'user_abc' can get, list, update, and delete income documents under their user document.
     * @deny (create) - A user with UID 'user_abc' cannot create an income document under another user's document.
     * @deny (get, list, update, delete) - A user with UID 'user_abc' cannot get, list, update, and delete income documents under another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/incomes/{incomeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/expenses/{expenseId} collection, allowing owner-only access.
     * @path /databases/{database}/documents/users/{userId}/expenses/{expenseId}
     * @allow (create) - A user with UID 'user_abc' can create an expense document under their user document.
     * @allow (get, list, update, delete) - A user with UID 'user_abc' can get, list, update, and delete expense documents under their user document.
     * @deny (create) - A user with UID 'user_abc' cannot create an expense document under another user's document.
     * @deny (get, list, update, delete) - A user with UID 'user_abc' cannot get, list, update, and delete expense documents under another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/installments/{installmentId} collection, allowing owner-only access.
     * @path /databases/{database}/documents/users/{userId}/installments/{installmentId}
     * @allow (create) - A user with UID 'user_abc' can create an installment document under their user document.
     * @allow (get, list, update, delete) - A user with UID 'user_abc' can get, list, update, and delete installment documents under their user document.
     * @deny (create) - A user with UID 'user_abc' cannot create an installment document under another user's document.
     * @deny (get, list, update, delete) - A user with UID 'user_abc' cannot get, list, update, and delete installment documents under another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/installments/{installmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}